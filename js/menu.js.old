function Menu(ctx,width, height,CountLevel, images) {
	
	this.height = height;
	this.width = width;
	this.enabled = true;
	//this.resume = true;
	this.CountLevel = CountLevel;
	var ctx = ctx;
	
	var page = 'main';
	
	this.newGame = function(levelNum) {};
	this.exitGame = function() {};
	
	var logo = images.logo;
	var eyes = images.eyes;
	var shadow = images.shadow;
	
	var btnNewGame = new Button({
	ctx		: ctx,
	images	: { normal	: images.btnNewGame,
				light	: images.btnNewGameLight },
	x		: (this.width - this.height * 0.3) / 2,
	y		: (this.height - this.height * 0.3) / 2,
	width	: this.height * 0.3,
	height	: this.height * 0.3
	});
	
	var btnSettings = new Button({
	ctx		: ctx,
	images	: { normal	: images.btnSettings,
				light	: images.btnSettings },
	x		: this.width * 0.05,
	y		: this.height * 0.75,
	width	: this.height * 0.2,
	height	: this.height * 0.2
	});

	var btnExitGame = new Button({
	ctx		: ctx,
	images	: { normal	: images.btnExitGame,
				light	: images.btnExitGame },
	x		: this.width * 0.85,
	y		: this.height * 0.75,
	width	: this.height * 0.2,
	height	: this.height * 0.2
	});

	var btnBackMenu = new Button({
	ctx		: ctx,
	images	: { normal	: images.btnBackMenu,
				light	: images.btnBackMenu },
	x		: this.width/2 - images.btnBackMenu.width/2,
	y		: this.height - images.btnBackMenu.height - 20,
	width	: images.btnBackMenu.width,
	height	: images.btnBackMenu.height
	});		

	var isNewGameSelect = false;
	var isExitGameSelect = false;
	var isSettingsSelect = false;
	var isBackMenuSelect = false;
	
	var btnsLevel = [];
	var isLevelSelect = [];
	var isLevelBlocked = [];
	for (var i = 0; i < this.CountLevel; i++) {
		var x = i % 5;
		var y = Math.floor(i / 5);	
		btnsLevel[i] = new Button({
		ctx		: ctx,
		images	: { normal	: images.btnsLevel,
					light	: images.btnsLevel },
		x		: this.width/5*x + (this.width/5 - (this.height/4 - 10))/2,
		y		: this.height/4*y + 5,
		width	: this.height/4 - 10,
		height	: this.height/4 - 10
		});	
	}

	for (var i = 0; i < this.CountLevel; i++) {
		isLevelBlocked[i] = false;
	}
	
	this.draw = function() {
		ctx.save();
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		switch(page) {
		case 'main':
			ctx.drawImage(logo, (this.width - logo.width) / 2, 30);
			ctx.drawImage(shadow, (this.width - shadow.width) / 2, 290);
			/*var tween = new Kinetic.Tween({
				node: 0,
				x: btnNewGame.y,
				duration: 0.5,
				onStep: function(i) {
					clear(btnNewGame.x-2,btnNewGame.y-2,btnNewGame.width+4,btnNewGame.height+4);
					btnNewGame.y = i;
					btnNewGame.draw();
					//console.log(i);
				}
			});
			tween.play();*/
			btnNewGame.draw(function() {ctx.drawImage(eyes, (btnNewGame.width - eyes.width) / 2, (btnNewGame.height - eyes.height) / 2)});
			
			btnSettings.draw();
			btnExitGame.draw();

		break;
		case 'settings':
			//ctx.drawImage(btnBackMenu, (this.width - btnBackMenu.width) / 2, 290);
			btnBackMenu.draw();
		break;
		case 'levels':
			for (var i = 0; i < this.CountLevel; i++) {
				btnsLevel[i].draw();
			}
				//ctx.drawImage(btnBackMenu, (this.width - btnBackMenu.width) / 2, 400);
			btnBackMenu.draw();
		
		break;
		}
		ctx.restore();
	}
	
	this.click = function(clickX, clickY) {
		switch(page) {
		case 'main':
			if (btnNewGame.checkMouse(clickX, clickY)) {
				page = 'levels';
				clear();
				
				this.draw();
			}

			if (btnSettings.checkMouse(clickX, clickY)) {
				page = 'settings';
				clear();
				this.draw();
			}			
		break;
		
		case 'settings' :
			/*var btnBackMenuX = (this.width - btnBackMenu.width) / 2;
			var btnBackMenuY = 290;
			if (clickX > btnBackMenuX && clickY > btnBackMenuY 
					&& clickX < btnBackMenuX + btnBackMenu.width
					&& clickY < btnBackMenuY + btnBackMenu.height) {
				page = 'main';
			}*/
			if (btnBackMenu.checkMouse(clickX, clickY)) {
				page = 'main';
				clear();
				this.draw();
			}			
		case 'levels' :
			if (btnBackMenu.checkMouse(clickX, clickY)) {
				page = 'main';
				clear();
				this.draw();
			}
			else {
				for (var i = 0; i < this.CountLevel; i++) {
				
					if (btnsLevel[i].checkMouse(clickX, clickY)) {
						clear();
						this.enabled = !this.enabled;
						this.newGame(i);
						break;
					}
				}
			}
		break;
		}
	}
	
	this.move = function(mouseX, mouseY) {
		switch(page) {
		case 'main':
			if (btnNewGame.checkMouse(mouseX, mouseY)) {
				if(btnNewGame.getState() == 'normal')
				{
					//console.log();
					btnNewGame.setState('light',function() {ctx.drawImage(eyes, (btnNewGame.width - eyes.width) / 2, (btnNewGame.height - eyes.height) / 2);});
				}
			} else {
				if(btnNewGame.getState() == 'light')
				{
					btnNewGame.setState('normal',function() {ctx.drawImage(eyes, (btnNewGame.width - eyes.width) / 2, (btnNewGame.height - eyes.height) / 2);});
				}
			}
			
			if (btnSettings.checkMouse(mouseX, mouseY)) {
				if(btnSettings.getState() == 'normal')
				{
					//console.log();
					clear(btnSettings.x,btnSettings.y,btnSettings.width,btnSettings.height);
					btnSettings.setState('light');
				}
			} else {
				if(btnSettings.getState() == 'light')
				{
					clear(btnSettings.x,btnSettings.y,btnSettings.width,btnSettings.height);
					btnSettings.setState('normal');
				}
			}			
			
		break;
		case 'settings':
		break;
		}
	}
	
	
	this.show = function() {
	}
	
}